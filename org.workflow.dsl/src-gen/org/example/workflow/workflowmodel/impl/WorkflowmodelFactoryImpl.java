/**
 * generated by Xtext 2.24.0
 */
package org.example.workflow.workflowmodel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.example.workflow.workflowmodel.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowmodelFactoryImpl extends EFactoryImpl implements WorkflowmodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WorkflowmodelFactory init()
  {
    try
    {
      WorkflowmodelFactory theWorkflowmodelFactory = (WorkflowmodelFactory)EPackage.Registry.INSTANCE.getEFactory(WorkflowmodelPackage.eNS_URI);
      if (theWorkflowmodelFactory != null)
      {
        return theWorkflowmodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WorkflowmodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowmodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WorkflowmodelPackage.SERVICE_WORKFLOW: return createServiceWorkflow();
      case WorkflowmodelPackage.THE_CLASS: return createTheClass();
      case WorkflowmodelPackage.OPERATION: return createOperation();
      case WorkflowmodelPackage.STATEMENT: return createStatement();
      case WorkflowmodelPackage.VARIABLE: return createVariable();
      case WorkflowmodelPackage.RELATIONAL: return createRelational();
      case WorkflowmodelPackage.UPDATE: return createUpdate();
      case WorkflowmodelPackage.DELETE: return createDelete();
      case WorkflowmodelPackage.CREATE: return createCreate();
      case WorkflowmodelPackage.EXPRESSIONS_MODEL: return createExpressionsModel();
      case WorkflowmodelPackage.CONDITION_ELEMENTS: return createConditionElements();
      case WorkflowmodelPackage.VARIABLE_INIT: return createVariableInit();
      case WorkflowmodelPackage.EXPRESSION: return createExpression();
      case WorkflowmodelPackage.REL_ATTRUBUTES_LIST: return createRelAttrubutesList();
      case WorkflowmodelPackage.REL_ATTRIBUTE: return createRelAttribute();
      case WorkflowmodelPackage.ATTRIBUTE: return createAttribute();
      case WorkflowmodelPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case WorkflowmodelPackage.TYPE_REFERENCE: return createTypeReference();
      case WorkflowmodelPackage.ENTITY_TYPE: return createEntityType();
      case WorkflowmodelPackage.OR: return createOr();
      case WorkflowmodelPackage.AND: return createAnd();
      case WorkflowmodelPackage.EQUALITY: return createEquality();
      case WorkflowmodelPackage.COMPARISON: return createComparison();
      case WorkflowmodelPackage.PLUS: return createPlus();
      case WorkflowmodelPackage.MINUS: return createMinus();
      case WorkflowmodelPackage.INT_CONSTANT: return createIntConstant();
      case WorkflowmodelPackage.STRING_CONSTANT: return createStringConstant();
      case WorkflowmodelPackage.BOOL_CONSTANT: return createBoolConstant();
      case WorkflowmodelPackage.VARIABLE_REF: return createVariableRef();
      case WorkflowmodelPackage.MUL_OR_DIV: return createMulOrDiv();
      case WorkflowmodelPackage.NOT: return createNot();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceWorkflow createServiceWorkflow()
  {
    ServiceWorkflowImpl serviceWorkflow = new ServiceWorkflowImpl();
    return serviceWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TheClass createTheClass()
  {
    TheClassImpl theClass = new TheClassImpl();
    return theClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relational createRelational()
  {
    RelationalImpl relational = new RelationalImpl();
    return relational;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Update createUpdate()
  {
    UpdateImpl update = new UpdateImpl();
    return update;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delete createDelete()
  {
    DeleteImpl delete = new DeleteImpl();
    return delete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Create createCreate()
  {
    CreateImpl create = new CreateImpl();
    return create;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionsModel createExpressionsModel()
  {
    ExpressionsModelImpl expressionsModel = new ExpressionsModelImpl();
    return expressionsModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionElements createConditionElements()
  {
    ConditionElementsImpl conditionElements = new ConditionElementsImpl();
    return conditionElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableInit createVariableInit()
  {
    VariableInitImpl variableInit = new VariableInitImpl();
    return variableInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelAttrubutesList createRelAttrubutesList()
  {
    RelAttrubutesListImpl relAttrubutesList = new RelAttrubutesListImpl();
    return relAttrubutesList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelAttribute createRelAttribute()
  {
    RelAttributeImpl relAttribute = new RelAttributeImpl();
    return relAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeReference createTypeReference()
  {
    TypeReferenceImpl typeReference = new TypeReferenceImpl();
    return typeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityType createEntityType()
  {
    EntityTypeImpl entityType = new EntityTypeImpl();
    return entityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableRef createVariableRef()
  {
    VariableRefImpl variableRef = new VariableRefImpl();
    return variableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOrDiv createMulOrDiv()
  {
    MulOrDivImpl mulOrDiv = new MulOrDivImpl();
    return mulOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowmodelPackage getWorkflowmodelPackage()
  {
    return (WorkflowmodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WorkflowmodelPackage getPackage()
  {
    return WorkflowmodelPackage.eINSTANCE;
  }

} //WorkflowmodelFactoryImpl
