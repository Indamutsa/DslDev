grammar org.example.workflow.Workflowmodel with org.eclipse.xtext.xbase.Xbase
//with org.eclipse.xtext.common.Terminals // 

generate workflowmodel "http://www.example.org/workflow/Workflowmodel"

 
//ServiceWorkflow:
//	imports+=Import*
//	features+=Feature*	
//	workflows+=Workflow
//;
//
///**
// * Import rule
// */
//Import:
//	'include' name=ValidID
//;
//
//// ------------------------
///**
// * Feature rule
// */
//Feature:
//	varExpressions+=AssignmentStatement*
//	statements += Statement*
//	loops+=Loop*
//	operations+=Operation*
//	services+=Service
//;
//
////-------
//
//AssignmentStatement:
//	'Define' VariableType field=[Field] '=' name=ID | 'type:' ArtifactType ',' 'link:' name=ID | 'type:' EventType	
//;
//
//VariableType:
//	typeName=('var'| 'boolean' | 'Artifact' | 'Event')
//;
//
//EventType:
//	typeName=( 'start'|'end'| 'error' | 'complete')
//;
//
//ArtifactType:
//	ModelArtifact | DslScript
//;
//
//ModelArtifact:
//	typeName=('ECORE'| 'XMI'|'FLEXMI')
//;
//
//DslScript:
//	typeName=('Eol'| 'Etl'|'Atl'| 'Ocl'| 'Evl' | 'Ecl')
//;
//
//// --------
//Statement:
//	PrintStatement | AssignmentStatement
//;
//
//PrintStatement:
//	'print' expression=Expression
//;
//
//Expression:
//	{intConstant} value=INT |
//	{StringConstant} value=STRING |
//	{BoolConstant} value=("false"| "true") |
//	{fieldRef} field=[Field]
//;
//
//Field:
//	type=VariableType
//	name=ID
//;
//
//// -------
//
//
//Loop:
//	'Loop:' 'if' '(' Condition ')' '{'
//		features+=Feature
//	'}'
//;
//
//
//Condition:
//	expr=Expression ('==' | '!=' | '>' | '<' | '>=' | '<=') expr1=Expression
//;
//
//// ------
//
//
//Operation:
//	"function" name=ID "(" parameters=AttributeList? ")" 
//		"{" 
//			features+=Feature* 
//		"}";
//
//
//AttributeList:
//	value+=RelAttribute (',' value+=RelAttribute)*;
//
//
//RelAttribute:
//	name=ID ':' reference=VariableType;
//
//// -----
//
//Service:
//	'Service' name=ID ':'
//		'type:' ('Transform' | 'Validate' | 'Compare'| 'Query')
//		'input:' specificParam=SpecificParam
//		'dsl:' path=STRING
//		'output:' name=ID
//		'outputEvent' event=EventType 
//;
//
//
//
//SpecificParam:
//	TransformParam | Param | CompareParam 
////	'[' ('inputModel: ' expression=Expression) ']'
//;
//
//TransformParam:
//	'[' 'SourceModel:' field1=[Field] ',' 'SourceMM:' field2=[Field] ',' 'targetModel:' field=[Field]  ']'
//;
//
//Param:
//	'[' 'Model:' field1=[Field] ',' 'MetaModel:' field2=[Field] ']'
//;
//
//
//CompareParam:
//	'[' 'Model1:' field1=[Field] ',' 'Model2:' field2=[Field] ']'
//;
//
//// *********************************************
//
//
///**
// * Workflow rule
// */
// 
//// --------------------------------------------------------------------------- 
//Workflow:
//	'Workflow' name=ID 'type:' ('SEQUENCE' | 'PARALLEL')
//	'{'
//		steps+=Step
//	'}'
//	'EXECUTE' field=[Field]'()'
//;
//
//
//
//Step:
//	'Step' name=STRING ':' 
//			features+=Feature
//;
//
//



//grammar org.blockchain.rell.Rell with org.eclipse.xtext.common.Terminals



ServiceWorkflow:
	entities+=TheClass*
	operations+=Operation*;

TheClass:
	'class' name=ID ('extends' superType=[TheClass])? '{'
	attributes+=Attribute*
	'}';

Operation:
	"operation" name=ID "(" parameters=RelAttrubutesList? ")" "{" statements+=Statement* "}";

Statement:
	(Relational | Variable) ';';

Variable:
	declaration=VariableDeclaration '=' expression=Expression;

Relational:
	Update | Delete | Create;

Update:
	'update' entity=ID '(' expressions=ExpressionsModel? ')' '{' variableList+=VariableInit
	(',' variableList+=VariableInit*)? '}';

Delete:
	'delete' entity=ID '(' expressions=ExpressionsModel? ')';

Create:
	'create' entity=ID '(' expressions=ExpressionsModel? ')';

ExpressionsModel:
	elements+=ConditionElements (',' elements+=ConditionElements*)?;

ConditionElements:
	compareName=ID ('==' | '!=' | '>' | '<' | '>=' | '<=') expr=Expression;


VariableInit:
	name=ID '=' expression=Expression;

Expression:
	Or;

Or returns Expression:
	And ({Or.left=current} "or" right=And)*;

And returns Expression:
	Equality ({And.left=current} "and" right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=("==" | "!=")
	right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
	right=PlusOrMinus)*;

PlusOrMinus returns Expression:
	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-')
	right=MulOrDiv)*;

Atomic returns Expression:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	{BoolConstant} value=('true' | 'false') |
	{VariableRef} variable=[Variable];

MulOrDiv returns Expression:
	Primary ({MulOrDiv.left=current} op=('*' | '/')
	right=Primary)*;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "not" expression=Primary |
	Atomic;

RelAttrubutesList:
	value+=RelAttribute (',' value+=RelAttribute)*;

RelAttribute:
	name=ID ':' reference=TypeReference;

Attribute:
	modificator=Prefix? variable=VariableDeclaration ';';

VariableDeclaration:
	name=ID ':' type=TypeReference;

TypeReference:
	primitive=PrimitiveType | entity=EntityType;

PrimitiveType:
	Text | Integer | Json | ByteArray;

EntityType:
	entity=[TheClass];

Json:
	'json';

Integer:
	'integer' | 'timestamp';

Text:
	'text' | 'tuid' | 'name';

ByteArray:
	'byte_array' | 'signer' | 'guid' | 'pubkey';

Prefix:
	'key' | 'index';
















