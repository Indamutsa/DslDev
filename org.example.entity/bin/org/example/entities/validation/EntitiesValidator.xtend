/*
 * generated by Xtext 2.24.0
 */
package org.example.entities.validation

import org.eclipse.xtext.validation.Check

import org.example.entities.entities.EntitiesPackage
import org.example.entities.entities.Entity
import org.example.entities.entities.Attribute
import java.util.HashSet

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class EntitiesValidator extends AbstractEntitiesValidator {

	protected static val ISSUE_CODE_PREFIX = "org.example.entities."
	
	public static val HIERACHY_CYCLE = ISSUE_CODE_PREFIX + "HierarchyCycle";
	
	public static val INVALID_ENTITY_NAME = 
		ISSUE_CODE_PREFIX + "invalidEntityName";
		
	public static val INVALID_ATTRIBUTE_NAME = 
		ISSUE_CODE_PREFIX + "InvalidAttributeName";


	@Check
	def checkNoCycleInEntityHieararchy(Entity entity) {
		if (entity.suprtType === null)
			return

		val visitedEntities = new HashSet<Entity>(); // newHashSet(entity)
		var current = entity.suprtType

		/**
		 * we traverse the hierarchy of an entity by recording all the 
		 * entities we are visiting. Of course, if an entity has no superType,
		 *  there is nothing to check. If during this visit we find an entity 
		 * that we have already visited, it means that the hierarchy contains 
		 * a cycle and we issue an error. It is crucial to leave the while 
		 * loop in that case; otherwise, the loop will never end
		 */
		while (current !== null) {
			if (visitedEntities.contains(current)) {
				error("Cycle in hierarchy of entity '" + current.name + "'", 
					EntitiesPackage.eINSTANCE.entity_SuprtType,
					HIERACHY_CYCLE, // issue code
					current.suprtType.name
				)
				return
			}

			visitedEntities.add(current)
			current = current.suprtType
		}
	}

	@Check
	def checkEntityNameStartsWithCapital(Entity entity) {
		if (Character.isLowerCase(entity.name.charAt(0)))
			warning("Entity name should start with a capital", 
				EntitiesPackage.eINSTANCE.entity_Name,
				INVALID_ENTITY_NAME,
				entity.name
			)
	}
	
	@Check
	def checkAttributeNameStartsWithLowercase(Attribute attr){
		if(Character.isUpperCase(attr.name.charAt(0)))
			warning("Attribute name should start with a lowercase",
				EntitiesPackage.eINSTANCE.attribute_Name,
				INVALID_ATTRIBUTE_NAME,
				attr.name
			)
	}
	
	
	
	
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					EntitiesPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

}
