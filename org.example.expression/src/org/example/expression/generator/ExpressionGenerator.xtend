/*
 * generated by Xtext 2.24.0
 */
package org.example.expression.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.expression.expression.ExpressionsModel
import org.example.expression.interpreter.ExpressionInterpreter

import static extension org.eclipse.xtext.nodemodel.util.NodeModelUtils.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpressionGenerator extends AbstractGenerator {
	@Inject extension ExpressionInterpreter

	/**
	 * Differently from the code generator we saw in Chapter 5, Code Generation, here we
	 * generate a single text file for each input file (an input file is represented by an EMF
	 * Resource ); the name of the output file is the same as the input file (retrieved by taking
	 * the last part of the URI of the resource), with an additional evaluated file extension.
	 */
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.toIterable.filter(ExpressionsModel).forEach [
			fsa.generateFile(
				//
				'''
					«resource.URI.lastSegment».evaluated
				''',
				interpretExpressions
			)
		]
	}

	def interpretExpressions(ExpressionsModel model) {
		model.elements.map [
			'''
				«getNode.getTokenText» ~> «interpret»
			'''
		].join("\n")
	}
}
